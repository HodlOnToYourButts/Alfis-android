name: Build and Release Android APK

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags (e.g., v1.0.0)
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Verify Java setup
      run: |
        echo "JAVA_HOME=$JAVA_HOME"
        java -version
        javac -version

    - name: Set up Android SDK
      uses: android-actions/setup-android@v3

    - name: Install Android NDK
      run: |
        ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager "ndk;29.0.13846066"
        echo "ANDROID_NDK_HOME=${ANDROID_HOME}/ndk/29.0.13846066" >> $GITHUB_ENV

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-linux-android,armv7-linux-androideabi,x86_64-linux-android,i686-linux-android

    - name: Install cargo-ndk
      run: cargo install cargo-ndk

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
          alfis/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          android/.gradle
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build APK using build script
      run: |
        chmod +x build.sh
        export JAVA_HOME=$JAVA_HOME
        export GRADLE_OPTS="-Dorg.gradle.java.home=$JAVA_HOME"
        ./build.sh

    - name: Build Release APK
      run: |
        cd android
        export JAVA_HOME=$JAVA_HOME
        export GRADLE_OPTS="-Dorg.gradle.java.home=$JAVA_HOME"
        ./gradlew assembleRelease

    - name: Sign APK (if keystore available)
      if: env.KEYSTORE_FILE != ''
      run: |
        cd android
        export JAVA_HOME=$JAVA_HOME
        export GRADLE_OPTS="-Dorg.gradle.java.home=$JAVA_HOME"
        echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > app/keystore.jks
        ./gradlew assembleRelease \
          -Pandroid.injected.signing.store.file=app/keystore.jks \
          -Pandroid.injected.signing.store.password="${{ secrets.KEYSTORE_PASSWORD }}" \
          -Pandroid.injected.signing.key.alias="${{ secrets.KEY_ALIAS }}" \
          -Pandroid.injected.signing.key.password="${{ secrets.KEY_PASSWORD }}"
      env:
        KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}

    - name: Get version from tag
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="dev-$(date +'%Y%m%d-%H%M%S')"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Rename APK files
      run: |
        cd android/app/build/outputs/apk

        # Rename debug APK
        if [ -f "debug/app-debug.apk" ]; then
          mv "debug/app-debug.apk" "debug/alfis-android-${{ steps.get_version.outputs.version }}-debug.apk"
        fi

        # Rename release APK
        if [ -f "release/app-release.apk" ]; then
          mv "release/app-release.apk" "release/alfis-android-${{ steps.get_version.outputs.version }}-release.apk"
        elif [ -f "release/app-release-unsigned.apk" ]; then
          mv "release/app-release-unsigned.apk" "release/alfis-android-${{ steps.get_version.outputs.version }}-release-unsigned.apk"
        fi

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          android/app/build/outputs/apk/debug/alfis-android-${{ steps.get_version.outputs.version }}-debug.apk
          android/app/build/outputs/apk/release/alfis-android-${{ steps.get_version.outputs.version }}-release*.apk
        name: Release ${{ steps.get_version.outputs.version }}
        body: |
          ## Alfis Android Release ${{ steps.get_version.outputs.version }}

          ### Downloads
          - **Debug APK**: For testing and development
          - **Release APK**: Production-ready build

          ### Installation
          1. Download the appropriate APK file
          2. Enable "Install from unknown sources" in Android settings
          3. Install the APK file

          ### What's New
          See commit history for changes in this release.

        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, 'alpha') || contains(steps.get_version.outputs.version, 'beta') || contains(steps.get_version.outputs.version, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Debug APK as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: alfis-android-debug-${{ steps.get_version.outputs.version }}
        path: android/app/build/outputs/apk/debug/alfis-android-${{ steps.get_version.outputs.version }}-debug.apk

    - name: Upload Release APK as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: alfis-android-release-${{ steps.get_version.outputs.version }}
        path: android/app/build/outputs/apk/release/alfis-android-${{ steps.get_version.outputs.version }}-release*.apk